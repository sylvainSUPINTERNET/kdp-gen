from typing import List
import ebooklib
from ebooklib import epub
import uuid
import os

import requests
from PIL import Image
from io import BytesIO

class Book(object):

    def __init__( self, book: epub.EpubBook, author:str, title:str, generated_content:List[str], language:str = "fr"):
        self.book = book
        self.language = language
        self.author = author
        self.title = title;
        
        # Text generated by the GPT model clean up
        self.generated_content = [t.strip() for t in generated_content]
        
    
    def add_metadata(self):
        self.book.set_identifier(str(uuid.uuid4()))
        self.book.set_title(self.title)
        self.book.set_language(self.language)
        self.book.add_author(self.author)
        
        return self
    
    def generate_illustration(self, paragraph:str, idx:int) -> Image:
        
        
        
        try:
            url_dalle = "https://api.openai.com/v1/images/generations"
            num_result = 1
            size = "512x512" # '256x256', '512x512', '1024x1024'
            
            body = {
                "prompt": f"{paragraph}",
                "n": num_result,
                "size": size
            }
            headers = {
                'Content-Type': 'application/json',
                "Authorization": f"Bearer {os.getenv('OPENAI_API_KEY')}"
            }
            resp = requests.post(url=url_dalle, json=body, headers=headers)
            
            if resp.status_code == requests.codes.ok:
                resp_data = resp.json()
                b_img_resp = requests.get(resp_data["data"][0]["url"])
                img = Image.open(BytesIO(b_img_resp.content))
                
                img.save(f"./img_generation/img-{idx}.jpeg")
                
                
                epub_image_bg = epub.EpubItem(uid=f'img-illustration-{idx}', file_name=f'./img_generation/img-{idx}.jpeg', media_type='image/jpeg', content=open(f"./img_generation/img-{idx}.jpeg", 'rb').read())
                self.book.add_item(epub_image_bg)
                
                return self
            else:
                print("error")
                print(resp.json())
                
        except Exception as e:
            print(e)
        
        


    def add_chapter(self, with_toc:bool = True):
        
        self.book.spine.append("nav")
        
        for idx, c in enumerate(self.generated_content):
            chapter = epub.EpubHtml(title=f"{str(uuid.uuid4())}", file_name=f"chap{idx+1}.xhtml", lang=self.language)
            
            self.generate_illustration(c, idx=idx)
            
            # Create the text and image elements
            content_template = f'<div><div style="display:flex;justify-content:center;"><h1>{c}</h1></div><div style="display:flex;justify-content:center;margin-top:2em;"><img src="./img_generation/img-{idx}.jpeg" style="text-align:center"></img></div></div>'            
            
            chapter.content = (
                f"{content_template}"
            )
            self.book.add_item(chapter)
            
            # Update TOC
            if with_toc is True:
                self.book.toc.append(
                    epub.Link(f"chap{idx+1}.xhtml", f"Chapter {idx+1}", f"chap{idx+1}"),
                )
                self.book.toc.append(
                    (epub.Section("Subchapter 1"), (epub.Link(f"chap{idx+1}.xhtml", f"Subchapter 1", f"chap{idx+1}"),))
                )
            
            
            self.book.spine.append(chapter)
         
        # Navigation
        self.book.add_item(epub.EpubNcx())  
        self.book.add_item(epub.EpubNav())
    
        return self
    
    
    def add_page_cover(self, with_toc:bool = True):
        # Create new HTML page
        page = epub.EpubHtml(title="te", file_name=f'{"te"}.xhtml', lang='en')
        
        # Add image to EPUB book
        # epub_image = epub.EpubItem(uid=f'{"te"}-image', file_name=f'{"img"}.png', media_type='image/png', content=open("./img.png", 'rb').read())
        epub_image_bg = epub.EpubItem(uid=f'{"te"}-image2', file_name=f'{"img"}.jpg', media_type='image/jpeg', content=open("./img.jpg", 'rb').read())
        # self.book.add_item(epub_image)
        self.book.add_item(epub_image_bg)
        
        css_item = epub.EpubItem(uid="style.css", file_name="style.css", media_type="text/css", content="html  { background-image: url('./img.jpg'); background-size: cover;background-repeat: no-repeat; }")
        self.book.add_item(css_item)
        page.add_link(href="style.css", rel="stylesheet", type="text/css")

        # Add image and text to HTML page
        # page.content = f'<div style="text-align:center"><img src="{epub_image.file_name}" alt="{"pn"}"/><p>{"caption"}</p></div>'
        page.content = f'<div style=""><p>heaaaa</p></div>'
        
        
        self.book.add_item(page)
        
        if with_toc is True:
            self.book.toc.append(epub.Link(page.file_name, "XD", "XD1"))

        
        # Add page to book spine
        self.book.spine.append(page)
        
        return self
    
    def write_book(self):
        # write to the file
        epub.write_epub("test.epub", self.book, {})
        print("Book generated")
        


